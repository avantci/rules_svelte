var BazelSvelteTest = (function (internal, ApolloClient, svelteApollo) {
  'use strict';

  ApolloClient = ApolloClient && ApolloClient.hasOwnProperty('default') ? ApolloClient['default'] : ApolloClient;

  /* packages/bazel-svelte/test/Button/Button.svelte generated by Svelte v3.12.1 */

  function create_fragment(ctx) {
  	var button, current;

  	const default_slot_template = ctx.$$slots.default;
  	const default_slot = internal.create_slot(default_slot_template, ctx, null);

  	return {
  		c() {
  			button = internal.element("button");

  			if (default_slot) default_slot.c();
  		},

  		l(nodes) {
  			if (default_slot) default_slot.l(button_nodes);
  		},

  		m(target, anchor) {
  			internal.insert(target, button, anchor);

  			if (default_slot) {
  				default_slot.m(button, null);
  			}

  			current = true;
  		},

  		p(changed, ctx) {
  			if (default_slot && default_slot.p && changed.$$scope) {
  				default_slot.p(
  					internal.get_slot_changes(default_slot_template, ctx, changed, null),
  					internal.get_slot_context(default_slot_template, ctx, null)
  				);
  			}
  		},

  		i(local) {
  			if (current) return;
  			internal.transition_in(default_slot, local);
  			current = true;
  		},

  		o(local) {
  			internal.transition_out(default_slot, local);
  			current = false;
  		},

  		d(detaching) {
  			if (detaching) {
  				internal.detach(button);
  			}

  			if (default_slot) default_slot.d(detaching);
  		}
  	};
  }

  function instance($$self, $$props, $$invalidate) {
  	let { $$slots = {}, $$scope } = $$props;

  	$$self.$set = $$props => {
  		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
  	};

  	return { $$slots, $$scope };
  }

  class Button extends internal.SvelteComponent {
  	constructor(options) {
  		super();
  		internal.init(this, options, instance, create_fragment, internal.safe_not_equal, []);
  	}
  }

  /* packages/bazel-svelte/test/App.svelte generated by Svelte v3.12.1 */

  function add_css() {
  	var style = internal.element("style");
  	style.id = 'svelte-1t58erw-style';
  	style.textContent = "body{margin:0}";
  	internal.append(document.head, style);
  }

  // (27:0) <Button>
  function create_default_slot(ctx) {
  	var t;

  	return {
  		c() {
  			t = internal.text(ctx.hello);
  		},

  		m(target, anchor) {
  			internal.insert(target, t, anchor);
  		},

  		p: internal.noop,

  		d(detaching) {
  			if (detaching) {
  				internal.detach(t);
  			}
  		}
  	};
  }

  function create_fragment$1(ctx) {
  	var current;

  	var button = new Button({
  		props: {
  		$$slots: { default: [create_default_slot] },
  		$$scope: { ctx }
  	}
  	});

  	return {
  		c() {
  			button.$$.fragment.c();
  		},

  		m(target, anchor) {
  			internal.mount_component(button, target, anchor);
  			current = true;
  		},

  		p(changed, ctx) {
  			var button_changes = {};
  			if (changed.$$scope) button_changes.$$scope = { changed, ctx };
  			button.$set(button_changes);
  		},

  		i(local) {
  			if (current) return;
  			internal.transition_in(button.$$.fragment, local);

  			current = true;
  		},

  		o(local) {
  			internal.transition_out(button.$$.fragment, local);
  			current = false;
  		},

  		d(detaching) {
  			internal.destroy_component(button, detaching);
  		}
  	};
  }

  function instance$1($$self, $$props, $$invalidate) {
  	

    const client = new ApolloClient({
      uri: ''
    });

    svelteApollo.setClient(client);

    const hello = 'Hello world';

  	return { hello };
  }

  class App extends internal.SvelteComponent {
  	constructor(options) {
  		super();
  		if (!document.getElementById("svelte-1t58erw-style")) add_css();
  		internal.init(this, options, instance$1, create_fragment$1, internal.safe_not_equal, ["hello"]);
  	}

  	get hello() {
  		return this.$$.ctx.hello;
  	}
  }

  return App;

}(internal, ApolloClient, svelteApollo));
